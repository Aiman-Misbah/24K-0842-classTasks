#include <iostream>
using namespace std;

struct Node
{
    int data;
    Node *next;
    Node(int value) : data(value), next(NULL) {}
};

class LinkedList
{
public:
    Node *head;
    LinkedList() : head(NULL) {}

    void addAtEnd(int value)
    {
        Node *newNode = new Node(value);
        if (!head)
        {
            head = newNode;
            return;
        }
        Node *temp = head;
        while (temp->next)
            temp = temp->next;
        temp->next = newNode;
    }

    void display()
    {
        Node *temp = head;
        while (temp)
        {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }

    void sortList()
    {
        if (!head)
            return;
        for (Node *i = head; i->next; i = i->next)
        {
            for (Node *j = i->next; j; j = j->next)
            {
                if (i->data > j->data)
                {
                    int temp = i->data;
                    i->data = j->data;
                    j->data = temp;
                }
            }
        }
    }

    void removeDuplicates()
    {
        Node *temp = head;
        while (temp && temp->next)
        {
            if (temp->data == temp->next->data)
            {
                Node *duplicate = temp->next;
                temp->next = temp->next->next;
                delete duplicate;
            }
            else
            {
                temp = temp->next;
            }
        }
    }

    int findMiddle()
    {
        Node *slow = head;
        Node *fast = head;
        while (fast && fast->next)
        {
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow ? slow->data : -1;
    }

    static LinkedList concatenate(LinkedList &list1, LinkedList &list2)
    {
        if (!list1.head)
            return list2;
        Node *temp = list1.head;
        while (temp->next)
            temp = temp->next;
        temp->next = list2.head;
        return list1;
    }

    static LinkedList mergeSorted(LinkedList &list1, LinkedList &list2)
    {
        LinkedList result;
        Node *p = list1.head;
        Node *q = list2.head;
        Node dummy(0);
        Node *tail = &dummy;
        while (p && q)
        {
            if (p->data <= q->data)
            {
                tail->next = new Node(p->data);
                p = p->next;
            }
            else
            {
                tail->next = new Node(q->data);
                q = q->next;
            }
            tail = tail->next;
        }
        while (p)
        {
            tail->next = new Node(p->data);
            p = p->next;
            tail = tail->next;
        }
        while (q)
        {
            tail->next = new Node(q->data);
            q = q->next;
            tail = tail->next;
        }
        result.head = dummy.next;
        return result;
    }
};

int main()
{
    LinkedList list1, list2;

    list1.addAtEnd(50);
    list1.addAtEnd(20);
    list1.addAtEnd(10);
    list1.addAtEnd(20);
    list1.addAtEnd(70);

    list2.addAtEnd(15);
    list2.addAtEnd(25);
    list2.addAtEnd(60);

    cout << "Original List 1:" << endl;
    list1.display();

    cout << "Sorted List 1:" << endl;
    list1.sortList();
    list1.display();

    cout << "Middle of List 1: " << list1.findMiddle() << endl;

    cout << "List 1 after removing duplicates:" << endl;
    list1.removeDuplicates();
    list1.display();

    cout << "Original List 2:" << endl;
    list2.display();

    cout << "Concatenated List (List1 + List2):" << endl;
    LinkedList concatenated = LinkedList::concatenate(list1, list2);
    concatenated.display();

    cout << "Merged Sorted Lists:" << endl;
    LinkedList merged = LinkedList::mergeSorted(list1, list2);
    merged.display();

    return 0;
}

